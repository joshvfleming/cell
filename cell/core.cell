;; cell core

;; logical "not"
(def not
  (=> (a)
      (cond a nil
            :else true)))

;; logical "and"
(def and
  (=> (a b)
      (cond a (cond b true
                    :else nil)
            :else nil)))

;; logical "or"
(def or
  (=> (a b)
      (cond a true
            b true
            :else nil)))

;; eq convenience form
(def =
  (=> (a b)
      (eq a b)))

;; tests for zero value
(def zero?
  (=> (n)
      (= n 0)))

;; decrements the number
(def dec
  (=> (n)
      (- n 1)))

;; increments the number
(def inc
  (=> (n)
      (+ n 1)))

;; "if" form
;; TODO this currently evals all arguments. Need to change this into a
;; macro when they're available
(def if
  (=> (c a b)
      (cond c a
            true b)))

;; concatenates two lists together
(def concat
  (=> (a b)
      (cond (rest a) (cons (first a) (concat (rest a) b))
            :else (cons (first a) b))))

;; reverses the list
(def reverse
  (=> (a)
      (cond (rest a)
            (concat (reverse (rest a)) (cons (first a) nil))

            :else
            a)))

;; internal count accepting the current position
(def count*
  (=> (a n)
      (cond (rest a)
            (count* (rest a) (inc n))

            :else n)))

;; returns the number of elements in the list
(def count
  (=> (a)
      (count* a 1)))

(def ffirst
  (=> (a)
      (first (first a))))

(def frest
  (=> (a)
      (first (rest a))))

(def frrest
  (=> (a)
      (first (rest (rest a)))))

(def frfirst
  (=> (a)
      (first (rest (first a)))))

(def frrfirst
  (=> (a)
      (first (rest (rest (first a))))))

(def frrrfirst
  (=> (a)
      (first (rest (rest (rest (first a)))))))

;; Returns a new list containing the result of applying the function
;; to each item of the given list
(def map
  (=> (f a)
      (cond a (cons (f (first a))
                    (map f (rest a)))
            :else nil)))

;; Returns the result of accumulating the result of apply the given
;; function to each item of the list
(def reduce
  (=> (f acc a)
      (cond a (reduce f (f acc (first a)) (rest a))
            :else acc)))

;; Returns the first n items of the list
(def take
  (=> (n a)
      (cond (zero? n) nil
            :else (cons (first a) (take (dec n) (rest a))))))

;; Returns everything but the first n items of the list
(def drop
  (=> (n a)
      (cond (zero? n) a
            :else (drop (dec n) (rest a)))))

;; Returns a list of lists, of size n, taken in order from the given
;; list
(def partition
  (=> (n a)
      (cond a (cons (take n a) (partition n (drop n a)))
            :else nil)))

;; TODO eval
(def eval
  (=> (e)
      nil))