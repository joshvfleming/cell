;; cell core

;; logical "not"
(def not
  (=> (a)
      (cond a nil
            :else true)))

;; logical "and"
(def and
  (=> (a b)
      (cond a (cond b true
                    :else nil)
            :else nil)))

;; logical "or"
(def or
  (=> (a b)
      (cond a true
            b true
            :else nil)))

;; eq convenience form
(def =
  (=> (a b)
      (eq a b)))

;; tests for zero value
(def zero?
  (=> (n)
      (= n 0)))

;; decrements the number
(def dec
  (=> (n)
      (- n 1)))

;; increments the number
(def inc
  (=> (n)
      (+ n 1)))

;; "if" form
;; TODO this currently evals all arguments. Need to change this into a
;; macro when they're available
(def if
  (=> (c a b)
      (cond c a
            true b)))

;; concatenates two lists together
(def concat
  (=> (a b)
      (cond (rest a) (cons (first a) (concat (rest a) b))
            :else (cons (first a) b))))

;; reverses the list
(def reverse
  (=> (a)
      (cond (rest a)
            (concat (reverse (rest a)) (cons (first a) nil))

            :else
            a)))

;; internal count accepting the current position
(def count*
  (=> (a n)
      (cond a (count* (rest a) (inc n))
            :else n)))

;; returns the number of elements in the list
(def count
  (=> (a)
      (count* a 0)))

(def ffirst
  (=> (a)
      (first (first a))))

(def frest
  (=> (a)
      (first (rest a))))

(def frrest
  (=> (a)
      (first (rest (rest a)))))

(def frfirst
  (=> (a)
      (first (rest (first a)))))

(def frrfirst
  (=> (a)
      (first (rest (rest (first a))))))

(def frrrfirst
  (=> (a)
      (first (rest (rest (rest (first a)))))))

(def rrest
  (=> (a)
      (rest (rest a))))

(def list
  (=> (a b)
      (cons a (cons b '()))))

;; Returns a new list containing the result of applying the function
;; to each item of the given list
(def map
  (=> (f a)
      (cond a (cons (f (first a))
                    (map f (rest a)))
            :else nil)))

;; Returns the result of accumulating the result of apply the given
;; function to each item of the list
(def reduce
  (=> (f acc a)
      (cond a (reduce f (f acc (first a)) (rest a))
            :else acc)))

;; Returns the first n items of the list
(def take
  (=> (n a)
      (cond (zero? n) nil
            :else (cons (first a) (take (dec n) (rest a))))))

;; Returns everything but the first n items of the list
(def drop
  (=> (n a)
      (cond (zero? n) a
            :else (drop (dec n) (rest a)))))

;; Returns a list of lists, of size n, taken in order from the given
;; list
(def partition
  (=> (n a)
      (cond a (cons (take n a) (partition n (drop n a)))
            :else nil)))

;; Returns the value from the association list with key k.
;; NOTE: This has O(n) lookup time complexity, and should eventually
;; be changed to a tree lookup.
(def get
  (=> (m k)
      (cond (eq (ffirst m) k) (frfirst m)

            :else
            (get (rest m) k))))

;; Returns elements from lists x and y paired up by position
(def pair
  (=> (x y)
      (cond (not (and x y)) nil
            
            (not (and (atom x) (atom y)))
            (cons (list (first x) (first y))
                  (pair (rest x) (rest y))))))

;; TODO eval
(def eval-cond
  (=> (c a)
      (cond (eval (first c) a) (eval (frest c) a)

            :else
            (eval-cond (rrest c) a))))

(def eval-list
  (=> (m a)
      (cond (null m) nil
            
            :else
            (cons (eval (first m) a) (eval-list (rest m) a)))))

(def eval
  (=> (e a)
      (cond (number? e) e
            (string? e) e
            (keyword? e) e
            (atom e) (get a e)
            (atom (first e))
              (cond (eq (first e) 'quote) (frest e)
                    (eq (first e) 'atom) (atom (eval (frest e) a))
                    (eq (first e) 'eq) (eq (eval (frest e) a) (eval (frrest e) a))
                    (eq (first e) 'cond) (eval-cond (rest e) a)
                    (eq (first e) 'first) (first (eval (frest e) a))
                    (eq (first e) 'rest) (rest (eval (frest e) a))
                    (eq (first e) 'cons) (cons (eval (frest e) a) (eval (frrest e) a))

                    ;; function call
                    :else (eval (cons (get a (first e)) (eval-list (rest e) a)) a))
              (eq (ffirst e) 'def ) )))
